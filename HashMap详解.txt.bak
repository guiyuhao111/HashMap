HashMap特点:允许null值和null键,元素是无序的,若要有序需要LinkedHashMap,HashMap不是线程安全的
1.HashMap结构
	HashMap是由一堆Node数组组成,Node元素是一种链表结构,因为数组内存空间连续,所以数组查询快,可以直接根据数组的下标进行查询如果要删除插入元素的话需要对数据进行扩容或缩容,
	而单向链表的特点是每个元素都有一个引用指向下个元素,因为其内存空间不连续所以查询慢,如果要对其增删的话只需要改变相应元素的指向就可以了,HashMap吸取了这两种数据结构的优点。

	HashMap重要参数:
	加载因子:数据的条目数可以达到多满的一种尺度,一般数据的条目数超过了容量*加载因子则会重新建立数据局结构(扩容2倍)
	容量:Node数组的长度

2.HashMap Get Put方法运行过程
	HashMap Get方法原理:
		HashMap数据的查询原理是现根据key值的hashcode按照一定的规则(链表数组的长度-1 & key的hashcode值即是hashcode值与链表数组的长度求余)生成一个下标此下标就是元素所在的Node节点在数组中的位置,
	找到这个节点之后会先判断key值是否是同一个引用如果不是同一个引用则equals进行比较,如果根据链表向下查找，所以如果有链表结构的话会影响HashMap的查询效率。
		
	
	Get源代码分析:
	public V get(Object key) {
        Node<K,V> e;
        return (e = getNode(hash(key), key)) == null ? null : e.value;
	}

	final Node<K,V> getNode(int hash, Object key) {
        Node<K,V>[] tab; Node<K,V> first, e; int n; K k;
	//HashMap Node[]属性名叫table
        if ((tab = table) != null && (n = tab.length) > 0 &&
	//根据table的长度-1 & hash 得到 当前所要查询的节点所在的位置,获得此节点(二进制进行与运算)
            (first = tab[(n - 1) & hash]) != null) {
            if (first.hash == hash && // always check first node
	    //先比较当前查询出来的节点 看key是否是同一个引用 如果不是同一个引用则进行equals比较(&&短路)
                ((k = first.key) == key || (key != null && key.equals(k))))
                return first;
		//如果第一个节点不是在看第一个节点所指向的下一个节点
            if ((e = first.next) != null) {
                if (first instanceof TreeNode)
                    return ((TreeNode<K,V>)first).getTreeNode(hash, key);
		    //遍历整个链表
                do {
                    if (e.hash == hash &&
                        ((k = e.key) == key || (key != null && key.equals(k))))
                        return e;
                } while ((e = e.next) != null);
            }
        }
        return null;
      }

      HashMap Put方法的原理:
		序言:当前创建一个HashMap对象时实际上HashMap的Node数组不会被初始化,当执行第一个Put方法时Node数组才会被初始化
		1.当前创建一个对象时会先求出bucketIndex值,根据bucketIndex值到找到对应位置Node节点,如果当前位置没有元素则添加新元素,看当前key是否equals要Node节点的key是就替换Node节点的Value不是向下遍历,如果都不匹配则在最后会创建新节点
		2.没添加新节点时如果当前元素数量是否达到阈值,达到阈值会进行resize()操作
	
	Put源码分析:
	public V put(K key, V value) {
        return putVal(hash(key), key, value, false, true);
	}

	final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
        Node<K,V>[] tab; Node<K,V> p; int n, i;
	//如果当前是第一向map里面put元素会初始化Node数组主要是resize方法
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
	//如果找到的数组位置没有元素则创建节点 
	---此处是第一个可能产生线程不安全的地方之一在多个线程同时插入的数据key的hash值相同并且同时走到创建新节点的位置时前面插入的数据会被后面插入的数据覆盖
	---其实这两个数据应该进行key值equals比较
        if ((p = tab[i = (n - 1) & hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else {
            Node<K,V> e; K k;
            if (p.hash == hash &&
                ((k = p.key) == key || (key != null && key.equals(k))))
                e = p;
            else if (p instanceof TreeNode)
                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
            else {
                for (int binCount = 0; ; ++binCount) {
                    if ((e = p.next) == null) {
                        p.next = newNode(hash, key, value, null);
                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            treeifyBin(tab, hash);
                        break;
                    }
                    if (e.hash == hash &&
                        ((k = e.key) == key || (key != null && key.equals(k))))
                        break;
                    p = e;
                }
            }
            if (e != null) { // existing mapping for key
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;
                afterNodeAccess(e);
                return oldValue;
            }
        }
        ++modCount;
	//每次创建节点完会当前条目数是否超过阈值超过则进行resize()操作
        if (++size > threshold)
	---此处是线程不安全的第二点
            resize();
        afterNodeInsertion(evict);
        return null;
    }

    resize():扩容:创建一个是原桶数组两倍的数组将原素组所有Node节点根据一定规则(根据原数组所有有元素的Node节点的key值重新rehash)放到新桶的相应位置,如果原数组为空(第一次Put时)则为Map初始化数组
    resize()源码分析:
    final Node<K,V>[] resize() {
    	---此处是线程不安全的第二点
	---当多个线程同时进入此处
	---第一种情况:当第一条线程执行了 table = newTab;这条语句第二条线程执行了下面的代码然后再去执行table = newTab;此时会造成数组的大小被扩充成4倍的效果
        Node<K,V>[] oldTab = table;
	---第二种情况:多个线程同时走到此处
	---当多个线程同时进入此处,第一条线程将原数组中的元素rehash放到新的数组
	---但是第二个线程不是将第一个线程rehash后的结果重新再放到新数组里面而是还是将原数组的元素重新rehash放到这样就导致了第一条线程修改后的结果被第二条线程重新覆盖的结果
        int oldCap = (oldTab == null) ? 0 : oldTab.length;
        int oldThr = threshold;
        int newCap, newThr = 0;
        if (oldCap > 0) {
            if (oldCap >= MAXIMUM_CAPACITY) {
                threshold = Integer.MAX_VALUE;
                return oldTab;
            }
            else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&
                     oldCap >= DEFAULT_INITIAL_CAPACITY)
                newThr = oldThr << 1; // double threshold
        }
	//调用了有参的HashMap构造方法,根据相应参数初始化数组
        else if (oldThr > 0) // initial capacity was placed in threshold
            newCap = oldThr;
	//调用了无参的HashMap构造方法,根据默认参数初始化数组
        else {               // zero initial threshold signifies using defaults
            newCap = DEFAULT_INITIAL_CAPACITY;
            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
        }
        if (newThr == 0) {
            float ft = (float)newCap * loadFactor;
            newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?
                      (int)ft : Integer.MAX_VALUE);
        }
        threshold = newThr;
        @SuppressWarnings({"rawtypes","unchecked"})
	//创建Node数组
            Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];
        table = newTab;
	//如果是扩容进入此方法,如果是初始化直接返回刚创建的数组
        if (oldTab != null) {
            for (int j = 0; j < oldCap; ++j) {
                Node<K,V> e;
                if ((e = oldTab[j]) != null) {
                    oldTab[j] = null;
                    if (e.next == null)
		    //如果此节点没有指向其他节点直接将此节点重新rehash放到新数组指定位置即可
                        newTab[e.hash & (newCap - 1)] = e;
                    else if (e instanceof TreeNode)
                        ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);
                    else { // preserve order
                        Node<K,V> loHead = null, loTail = null;
                        Node<K,V> hiHead = null, hiTail = null;
                        Node<K,V> next;
			//链表rehash放到新数组指定位置
                        do {
                            next = e.next;
                            if ((e.hash & oldCap) == 0) {
                                if (loTail == null)
                                    loHead = e;
                                else
                                    loTail.next = e;
                                loTail = e;
                            }
                            else {
                                if (hiTail == null)
                                    hiHead = e;
                                else
                                    hiTail.next = e;
                                hiTail = e;
                            }
                        } while ((e = next) != null);
                        if (loTail != null) {
                            loTail.next = null;
                            newTab[j] = loHead;
                        }
                        if (hiTail != null) {
                            hiTail.next = null;
                            newTab[j + oldCap] = hiHead;
                        }
                    }
                }
            }
        }
        return newTab;
    }
3.为什么说HashMap容量必须是2的整次幂?
---1.HashMap在计算bucketIndex时是用容量减一&key的hash值入如果容量是2的整次幂的话-1再转换成2进制数后几位全部是1这样bucketIndex就取决于hash后几位的数字,这样bucketIndex的范围是0-容量,如果容量不是2的整次幂的话
bucketIndex出现某些数字的几率较高一些,就容易产生链表
例如1. hash的二进制值是: 11110101 01010101 0011010
     容量减一二进制是: 00000000 00000000 1111111
       buketIndex值是: 00000000 00000000 0011010
       所以buketIndex是取决于hash的后几位也就是(0-容量-1)的这个范围

    2. hash的二进制是: 11110101 01010101 0011010
     容量减一二进制是: 00000000 00000000 1111011
   如果hash的二进制是: 11110101 01010101 0011110
   buketIndex是相同的这样就会产生链表

4.为什么说HashMap不是线程安全的
	1.当多个线程对同一资源进行数据修改时有可能会产生线程安全的问题,此处putValue()和resize()方法均不是线程安全的
	put方法不安全的点主要是:多个线程将具有同一hashcode值的key的数据进行同时插入,前面的数据会被后面的数据覆盖掉
	2.resize方法不安全的问题主要两点
		---1.第一个线程对第二个线程修改后的table又扩容了一遍,这就造成原数组被扩容了四倍
		---2.第一个线程对原数组rehash一遍放到新数组里面去,但是第二个线程对原数组有rehash了一遍放到新数组里面去这就造成了第一条线程放入里面的数据丢失的问题

5.为什么说HashMap是无序的?
	---1.只要是说HashMap元素在存放时其存放的时间顺序和其存放的空间顺序是不一致的,只要是因为hashMap在存放时其存放的顺序是有key生成的hashcode值和容量来决定的,如果容量不变那么存放的顺序就主要跟key值有关